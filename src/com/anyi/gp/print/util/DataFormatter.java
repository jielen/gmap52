/* Generated by Together */
/* $Id: DataFormatter.java,v 1.3 2009/03/16 01:38:39 liuxiaoyong Exp $*/
package com.anyi.gp.print.util;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.util.Locale;

import com.anyi.gp.context.ApplusContext;
import com.anyi.gp.pub.DAOFactory;
import com.anyi.gp.pub.DBHelper;
import com.anyi.gp.util.StringTools;

/**
 *
 * <p>
 * Title: DataFormatter数据转换类
 * </p>
 * <p>
 * Description: 主要负责将模板中的数据进行转换
 * </p>
 * <p>
 * Copyright: Copyright (c) 2004
 * </p>
 * <p>
 * Company: UFGOV
 * </p>
 *
 * @author leejianwei
 * @version 1.0
 */
public class DataFormatter{
  /**
   * 零数据变成空（不打印零数据时使用）
   *
   * @param source
   *          源数据
   * @return 如果是零数据，返回空字符串
   */
  public static String zeroData2Empty(String source){
    String result = "";
    if(source == null){
      source = "";
    }
    if(!source.equals("")){
      try{
        Double d = Double.valueOf(source);
        if(!d.toString().equals("0.0")){
          result += source;
        }
      } catch(NumberFormatException e){
        result = source;
      }
    }
    return result;
  }

  public static Double zeroData2Empty(Double source){
    String result = "0";
    if(source != null){
      if(!source.toString().equals("0.0")){
        result += source.toString();
      }
    }
    return Double.valueOf(result);
  }

  /**
   * 过滤值集代码（打印模板中如果设置不打印值集代码时调用）
   *
   * @param sourceData
   *          带值集代码的源数据
   * @return 仅有值集值的字符串
   */
  public static String filterValSetCode(String sourceData){
    String result = sourceData;
    if(sourceData == null){
      return "";
    }
    int blkindex = sourceData.indexOf(" ");
    if(blkindex > -1){
      if(blkindex != sourceData.length() - 1){
        result = sourceData.substring(blkindex + 1);
      }
    }
    return result;
  }

  /**
   * 金额大写转换
   *
   * @param lowerData
   *          小写的金额数据
   * @return 转换为大写的金额数据
   */
  public static String money2upper(String lowerData){
    if(lowerData == null || lowerData.equals("")){
      return "";
    }
    if(lowerData.startsWith("￥") || lowerData.startsWith("$")){
      lowerData = lowerData.substring(1);
    }
    if(lowerData.indexOf(",") > -1){
      lowerData = StringTools.replaceAll(lowerData, ",", "");
    }
    String num = "" + lowerData;
    String isPrintZero = "Y";
    StringBuffer result = new StringBuffer();
    int i = 0;
    boolean flag = true;
    for(i = 0; i < num.length(); i++){
      if((num.charAt(i) < '0' || num.charAt(i) > '9') && num.charAt(i) != '.'
         && num.charAt(i) != '-'){
        flag = false;
        break;
      }
      if(!num.substring(i, i + 1).equals("0") && !num.substring(i, i + 1).equals("-")
         && !num.substring(i, i + 1).equals(".")
         && !num.substring(i, i + 1).equals(" ")){
        break;
      }
    }
    if(!flag){
      return lowerData;
    }
    if(i == num.length()){
      if(isPrintZero.equalsIgnoreCase("N")){
        return "";
      }
      return "零元整";
    }
    i = num.indexOf("-");
    if(i > -1){
      result.append("负");
      num = num.substring(i + 1);
    }
    if(num.indexOf("E") > -1){
      num = formatNumber(num);
    }
    String numI = num, numD = "00";
    i = num.indexOf(".");
    if(i > -1){
      numI = num.substring(0, i);
      numD = num.substring(i + 1);
      if(numD.length() == 0){
        numD = "00";
      }
      if(numD.length() == 1){
        numD += "0";
      }
    }
    boolean zeroFlag = false; // 整数部分是否为0；
    if(numI.startsWith("0") && numI.endsWith("0")){
      zeroFlag = true;
    } else{
      String pZero = "N";
      for(i = 0; i < numI.length(); i++){
        String d = numI.substring(i, i + 1);
        int j = numI.length() - i - 1;
        if(d.equals("0") && !(j == 0 || j == 4 || j == 8)){
          pZero = "Y";
          continue;
        }
        if(d.equals("0")){
          pZero = "Y";
          result.append(addUnit(j));
          continue;
        }
        if(pZero.equals("Y")){
          result.append(dToU("0"));
          pZero = "N";
        }
        result.append(dToU(d));
        result.append(addUnit(j));
      }
    }
    long iNum = Long.parseLong(numD);
    long ac;
    for(int k = numD.length() - 2; k > 0; k--){
      ac = iNum % 10;
      iNum /= 10;
      if(ac >= 5){
        iNum += 1;
      }
    }
    if(iNum == 0){
      result.append("整");
    } else{
      numD = String.valueOf(iNum);
      if(numD.length() == 1){
        numD = "0" + numD;
      }
      //if (!zeroFlag && numI.endsWith("0") && !numD.startsWith("0")) {
      //result.append("零");
      //}
      if(numD.startsWith("0") && !numD.endsWith("0")){
        if(!zeroFlag){
          result.append("零");
        }
      } else{
        result.append(dToU(numD.substring(0, 1)));
        result.append("角");
      }
      if(!numD.endsWith("0")){
        result.append(dToU(numD.substring(1, 2)));
        result.append("分");
      }
    }
    String upp = result.toString();
    if(upp != null && upp.indexOf("亿万") != -1){
        upp = StringTools.replaceAll(upp, "亿万", "亿"); 
    }
    return upp;
  }

  /**
   *
   * @param text String
   * @return String
   */
  public static String formatNumber(String text){
    try{
      if(text != null && text.indexOf("E") > -1){
        NumberFormat nf = NumberFormat.getInstance(Locale.CHINESE);
        Number number = nf.parse(text);
        DecimalFormat df = new DecimalFormat("################.000000");
        text = df.format(number.doubleValue());
      }
    } catch(ParseException ex){
      return text;
    }
    return text;
  }

  public static String money2upper(Double lowerData){
    if(lowerData == null){
      lowerData = new Double(0.0);
    }
    return money2upper(lowerData.toString());
  }

  private static String dToU(String r){
    String s = "零壹贰叁肆伍陆柒捌玖";
    int i = Integer.parseInt(r);
    return s.substring(i, i + 1);
  }

  private static String addUnit(int r){
    String s = "元拾佰仟万拾佰仟亿拾佰仟万";
    return s.substring(r, r + 1);
  }


  public static String scaleData(String source, String scale){
    if(source == null || source.equals("")){
      return source;
    }
    if(source.indexOf("E") > -1){
      source = formatNumber(source);
    }
    if(source.startsWith(".")){
      source = "0" + source;
    }
    if(source.startsWith("-.")){
      source = source.substring(2);
      source = "-0." + source;
    }
    StringBuffer result = new StringBuffer();
    int intScale = Integer.parseInt(scale);
    int pointIndex = source.indexOf(".");
    if(pointIndex == -1){
      if(intScale > 0){
        result.append(source);
        result.append(".");
        for(int i = 0; i < intScale; i++){
          result.append("0");
        }
      } else{
        result.append(source);
      }
    } else{
      if(intScale > 0){
        String decimal = source.substring(pointIndex + 1);
        int decimalLen = decimal.length();
        if(decimalLen == intScale){
          result.append(source);
        } else if(decimalLen > intScale){
          result.append(source.substring(0, pointIndex + 1));
          long iNum = Long.parseLong(decimal);
          long ac;
          for(int k = decimalLen - intScale; k > 0; k--){
            ac = iNum % 10;
            iNum /= 10;
            if(ac >= 5){
              iNum += 1;
            }
          }
          int i = 0;
          for(; i < decimalLen; i++){
            if(decimal.charAt(i) != '0'){
              break;
            }
          }
          int k = 0;
          if(i > intScale){
            k = intScale;
          } else if(i == intScale){
            k = i - 1;
          } else{
            k = i;
          }
          if(iNum != 10){
            for(int j = 0; j < k; j++){
              result.append(decimal.charAt(j));
            }
          }
          if(i == intScale){
            if(iNum == 0){
              result.append("0");
            } else{
              result.append("1");
            }
          } else if(i < intScale){
            result.append(iNum);
          }
        } else{
          result.append(source);
          for(int i = decimalLen; i < intScale; i++){
            result.append("0");
          }
        }
      }
    }
    return result.toString();
  }

  public static Double scaleData(Double source, String scale){
    if(source == null){
      source = new Double(0.0);
    }
    return new Double(scaleData(source.toString(), scale));
  }

  public static String deliData(String s1, String deli){
    StringBuffer result = new StringBuffer();
    // boolean isMinus = false;

    if(s1.startsWith("￥") || s1.startsWith("$")){
      result.append(s1.substring(0, 1));
      s1 = s1.substring(1);
    }
    if(s1.indexOf(",") > -1){
      s1 = StringTools.replaceAll(s1, ",", "");
    }
    if(s1.startsWith("-")){
      result.append(s1.substring(0, 1));
      s1 = s1.substring(1);
      // isMinus = true;
    }
    if(s1.indexOf("E") > -1){
      s1 = formatNumber(s1);
    }
    int index = s1.indexOf(".");
    String s = null;
    String s2 = null;
    if(index != -1){
      s = s1.substring(0, index);
      s2 = s1.substring(index);
    } else{
      s = s1;
      s2 = "";
    }
    // 千分位格式化后字符串中第一个逗号前字符个数.
    int head = s.length() % 3;
    // 需要加入逗号的个数
    int numOfComma = s.length() / 3;
    if((head != 0) && (numOfComma != 0)){
      result.append(s.substring(0, head));
      result.append(deli);
      for(int i = 0; i < numOfComma; i++){
        result.append(s.substring(i * 3 + head, (i + 1) * 3 + head));
        if(i != numOfComma - 1){
          result.append(deli);
        }
      }
    } else if((head != 0) && (numOfComma == 0)){
      result.append(s.substring(0, head));
    } else if((head == 0) && (numOfComma != 0)){
      for(int j = 0; j < numOfComma; j++){
        result.append(s.substring(j * 3, (j + 1) * 3));
        if(j != numOfComma - 1){
          result.append(deli);
        }
      }
    } else{
      result.append("");
    }
    result.append(s2);
    String res = result.toString();
    // if(isMinus){
    // res = "-" + res;
    // }
    return res;
  }

  public static String deliData(Double s1, String deli){
    if(s1 == null){
      s1 = new Double(0.0);
    }
    return deliData(s1.toString(), deli);
  }

  public static File getPrintImage(String fileId){
    InputStream result = null;
    File f = null;
    FileOutputStream fos;
    byte data[] = new byte[4096];
    String sql = "select suffix_name, file_content from as_file"
                 + " where file_id = ?";
    Connection conn = DAOFactory.getInstance().getConnection();
    PreparedStatement ps = null;
    ResultSet rs = null;
    try{
      ps = conn.prepareStatement(sql);
      ps.setString(1, fileId);
      rs = ps.executeQuery();
      String fileType = "image/pjpeg\r\n";
      if(rs.next()){
        fileType = rs.getString(1);
        result = rs.getBinaryStream("file_content");
      }
      //String path = (String)Global.getInstance().get("ReportsPath");
      String path = ApplusContext.getEnvironmentConfig().get("ReportsPath");
      if(fileType.endsWith("pjpeg\r\n")){
        f = new File(path, fileId + ".jpeg");
      } else if(fileType.endsWith("gif\r\n")){
        f = new File(path, fileId + ".gif");
      }
      fos = new FileOutputStream(f);
      int len = -1;
      int totalLength = 0;
      while((len = result.read(data)) != -1){
        totalLength += len;
        fos.write(data);
      }
      fos.close();
    } catch(SQLException ex){
      throw new RuntimeException("com.anyi.erp.print.util.DataFormatter类打印读取图像出错");
    } catch(IOException e){
      throw new RuntimeException("com.anyi.erp.print.util.DataFormatter类打印读取图像出错");
    } finally{
      DBHelper.closeConnection(conn, ps, rs);
    }
    return f;
  }


/**
 * 转换日期大写
 * @param sDate
 * @return
 */
  public static String date2upper(String sDate){
  	StringBuffer uDate = new StringBuffer();

  	try {
  	  if(sDate == null){
  	    sDate = "";
  	  }
  	  if(sDate.length() > 0){
  	  	String year = sDate.substring(0,4);
  	    uDate.append(dToU1(year.substring(0,1)));
  	    uDate.append(dToU1(year.substring(1,2)));
  		uDate.append(dToU1(year.substring(2,3)));
  		uDate.append(dToU1(year.substring(3,4)));
  		uDate.append("年");
  		if(sDate.length() >= 7){
  	  	  String month = sDate.substring(5,7);
  	  	  uDate.append(dayToU(month));
  	  	  uDate.append("月");
  		}
  		if(sDate.length() >= 10){
	  	  String day = sDate.substring(8,10);
	  	  uDate.append(dayToU(day));
	  	  uDate.append("日");
  		}
  	  }

  	}
  	catch (Exception e) {
  	  uDate = new StringBuffer();
  	  uDate.append(sDate);
  	}
  	return uDate.toString();
  }

  private static String dToU1(String r){
      String s = "零一二三四五六七八九";
      int i = Integer.parseInt(r);
      return s.substring(i, i + 1);
  }

  /**
   * 
   * @param day
   * @return
   */
  public static String dayToU(String day){
    StringBuffer uDay = new StringBuffer();
    if(day == null){
       day = "";  
     }      
    if(day.length() == 1){
        day = "0" + day;
    }
    if(!day.startsWith("0")){
      if(!day.startsWith("1")){
        uDay.append(dToU1(day.substring(0,1)));  
      }
      uDay.append("十");
    }
    if(!day.endsWith("0")){
      uDay.append(dToU1(day.substring(1,2)));
    }
    return uDay.toString();
  }
  
  /**
   * 
   * @param day
   * @return
   */
  public static String dayToU2(String day){
    StringBuffer uDay = new StringBuffer();
    if(day == null){
       day = "";  
    }      
    if(day.length() == 1){
        day = "0" + day;
    }
    if(!day.startsWith("0")){
      if(!day.startsWith("1")){
        uDay.append(dToU1(day.substring(0,1)));  
      }
      uDay.append("十");
    }
    if(!day.endsWith("0")){
      uDay.append(dToU1(day.substring(1,2)));
    }
    if(uDay.length() == 1){
      uDay.insert(0 ,"零");
    }
    return uDay.toString();
  }
  
  /**
   * 
   * @param day
   * @return
   */
  public static String dayToU3(String day){
    StringBuffer uDay = new StringBuffer();
    if(day == null){
       day = "";  
    }    
    if(day.length() == 1){
        day = "0" + day;
    }
    if(!day.startsWith("0")){
      if(!day.startsWith("1")){
        uDay.append(dToU(day.substring(0,1)));  
      }
      uDay.append("拾");
    }
    if(!day.endsWith("0")){
      uDay.append(dToU(day.substring(1,2)));
    }
    if(uDay.length() == 1){
      uDay.insert(0 ,"零");
    }
    return uDay.toString();
  }
  
  /**
   * 
   * @param day
   * @return
   */
  public static String dayToU4(String day){
    StringBuffer uDay = new StringBuffer();
    if(day == null){
       day = "";  
    }    
    if(day.length() == 1){
        day = "0" + day;
    }
    if(!day.startsWith("0")){
      uDay.append(dToU(day.substring(0,1)));  
      uDay.append("拾");
    }
    if(!day.endsWith("0")){
      uDay.append(dToU(day.substring(1,2)));
    }
    if(uDay.length() == 1){
      uDay.insert(0 ,"零");
    }
    return uDay.toString();
  }
  
  /**
   * 
   * @param day
   * @return
   */
  public static String day2U(String day){
      return dayToU(day);
  }
  
  /**
   * 
   * @param year
   * @return
   */
  public static String yearToU(String year){
	  if(year == null || year.length() < 4){
	      return year;
	  }
	  StringBuffer uYear = new StringBuffer();
	  uYear.append(dToU1(year.substring(0,1)));
	  uYear.append(dToU1(year.substring(1,2)));
	  uYear.append(dToU1(year.substring(2,3)));
	  uYear.append(dToU1(year.substring(3,4)));
	  return uYear.toString();
  }
  
   /**
   * 
   * @param year
   * @return
   */
  public static String yearToU3(String year){
	  if(year == null || year.length() < 4){
	      return year;
	  }
	  StringBuffer uYear = new StringBuffer();
	  uYear.append(dToU(year.substring(0,1)));
	  uYear.append(dToU(year.substring(1,2)));
	  uYear.append(dToU(year.substring(2,3)));
	  uYear.append(dToU(year.substring(3,4)));
	  return uYear.toString();
  }
  
  /**
   * 
   * @param year
   * @return
   */
  public static String year2U(String year){
    return yearToU(year);
  }
  
  
  /**
   * 
   * @param str
   * @param space
   * @param isUpper
   * @return
   */
  public static String insertSpacing(String str, String space, String isUpper){
    if(str == null || space == null)
      return "";
    StringBuffer result = new StringBuffer();
    
    if(str.indexOf("E") > -1){
      str = formatNumber(str);
    }
    int index = str.indexOf(".");
    if(index == -1){
      str = str + roundNum2("");
    }
    else{
      String tmp = str.substring(index + 1);
      str = str.substring(0, index + 1) + roundNum2(tmp);
    }
    str = StringTools.replaceAll(str, ".", "");
    str = StringTools.replaceAll(str, ",", "");
    
    boolean minus = false;
    if(str.indexOf("-") == 0){
      str = str.substring(1);
      minus = true;
    }
    while(str.indexOf("0") == 0){
      str = str.substring(1);
	  }
	  if("".equals(str)){
	    str = "000";
	  }
	  if(minus){
	    str = "-" + str;  
	  }
    if("Y".equals(isUpper) || "y".equals(isUpper)){
      str = money2upperNoUnits(str);  
    }
    result.append(insertSpacing(str, space));
    return result.toString();
  }
  
  /**
   * 
   * @param upper
   * @return
   */
  public static String money2upperNoUnits(String upper){
    if(upper == null || "".equals(upper))
      return "";
    StringBuffer result = new StringBuffer();
    if(upper.indexOf("-") == 0){
      result.append("负");
      upper = upper.substring(1);
    }
    for(int i = 0, j = upper.length(); i < j; i++){
      result.append(dToU(upper.charAt(i)+""));
    }
    return result.toString();
  }
  
  /**
   * 
   * @param str
   * @param space
   * @return
   */
  public static String insertSpacing(String str, String space){
	  if(str == null || space == null)
	    return "";
	  StringBuffer result = new StringBuffer();
	  for(int i = 0, j = str.length(); i < j; i++){
	    result.append(str.charAt(i));
	    result.append(space);
	  }
	  return result.toString();
	}
  
  
  /**
   * 四舍五入，保留2位小数，本函数处理小数部分
   * @param numD
   * @return
   */
  public static String roundNum2(String numD){
    String result = "";
    if(numD == null)
      return result;
    int digit = 2;
    if(numD.length() < digit){
        for(int i = numD.length() ; i < digit; i++){
          numD = numD + "0";  
        }
        result = numD;
    }
    else if(numD.length() > digit){
		  long iNum = Long.parseLong(numD);
		  long ac;
		  for(int k = numD.length() - digit; k > 0; k--){
		    ac = iNum % 10;
		    iNum /= 10;
		    if(ac >= 5){
		      iNum += 1;
		    }
		  }
		  result = iNum + "";
		  if(result.length() < digit){
        for(int i = result.length() ; i < digit; i++){
            result = "0" + result;  
        }  
		  }
    }
    else{
      result = numD;
    }
	  return result;
  }

}

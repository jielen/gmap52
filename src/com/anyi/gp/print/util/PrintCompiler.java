/* Generated by Together */
/* $Id: PrintCompiler.java,v 1.1 2008/03/25 06:58:36 liuxiaoyong Exp $ */

package com.anyi.gp.print.util;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;

import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlWriter;

import org.apache.log4j.Logger;

import com.anyi.gp.print.exception.PrintingException;

/**
 * XML格式模板文件编译成.jasper文件
 * <p>
 * Title: PrintCompiler模板编译器
 * </p>
 * <p>
 * Description: 将XML格式模板文件编译成.jasper文件
 * </p>
 * <p>
 * Copyright: Copyright (c) 2004
 * </p>
 * <p>
 * Company: UFGOV
 * </p>
 *
 * @author leejianwei
 * @version 1.0
 */
public class PrintCompiler{
  private static Logger log = Logger.getLogger(PrintCompiler.class);

  /**
   *
   * @param fileName String
   * @return JasperReport
   * @throws PrintingException
   */
  public static JasperReport compileDesign(String fileName) throws PrintingException{
    JasperDesign design = PrintTPLLoader.loadDesign(fileName);
    return compileDesign(design);
  }

  /**
   * 编译生成JasperReport
   *
   * @param desing
   *          JasperDesign XML格式模板对象
   * @return JasperReport 编译后模板文件
   */
  public static JasperReport compileDesign(JasperDesign design) throws
      PrintingException{
	  JasperReport result = null;
	  try{
	      result = JasperCompileManager.compileReport(design);
	  } catch(Exception e){
	      throw new RuntimeException("Class PrintCompiler, Method compileDesign(JasperDesign design,HashMap printParameter) Exception : "
	                                 + e.getMessage() + "\n");
	  }
	  return result;
  }

  /**
   * 输出JasperDesign XML格式模板对象文件
   *
   * @param desing
   *          JasperDesign XML格式模板对象
   * @return JasperDesign XML格式模板对象文件
   */
  public static String JDesignWriterXml(JasperDesign design) throws
      PrintingException{
    String result = null;
    try{
      result = JRXmlWriter.writeReport(design, "gb2312");
    } catch(Exception e){
      log.error("PrintCompiler类JDesignWriterXml方法中编译模板出错,  JRException="
                + e.toString());
      throw new PrintingException("PrintCompiler类JDesignWriterXml方法中编译模板出错"
                                  + e.toString());
    }
    return result;
  }

  /**
   * 输出JasperDesign XML格式模板对象文件
   *
   * @param desing
   *          JasperDesign XML格式模板对象
   * @filename desing JasperDesign XML格式模板文件名
   */
  public static void JDesignWriterXml(JasperDesign design, String filename) throws
      PrintingException{
    String result = null;
    try{
      result = JRXmlWriter.writeReport(design, "gb2312");
    } catch(Exception e){
      log.error("PrintCompiler类JDesignWriterXml方法中编译模板出错,  JRException="
                + e.toString());
      throw new PrintingException("PrintCompiler类JDesignWriterXml方法中编译模板出错"
                                  + e.toString());
    }
    if(filename != null){
      String filenames = "";
      if(filename.endsWith(".xml")){
        filenames = com.anyi.gp.print.util.PrintTPLLoader.getJasperReportPath()
                    + filename;
      } else{
        filenames = com.anyi.gp.print.util.PrintTPLLoader.getJasperReportPath()
                    + filename + ".xml";
      }
      try{
        File createFile = new File(filenames);
        if(!createFile.exists()){
          createFile.createNewFile();
        }
        PrintWriter tempPW = new PrintWriter(new FileWriter(filenames), true);
        tempPW.println(result);
        tempPW.close();
      } catch(IOException ex){
        log.error("PrintCompiler类JDesignWriterXml(JasperDesign design, String filename)方法中生成模板文件出错,  JRException="
                  + ex.toString());
        throw new PrintingException(
            "PrintCompiler类JDesignWriterXml(JasperDesign design, String filename)方法中生成模板文件出错,"
            + ex.toString());

      }
    }
  }

}

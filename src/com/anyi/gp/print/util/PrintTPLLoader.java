/* Generated by Together */
/* $Id: PrintTPLLoader.java,v 1.8 2009/07/10 08:36:56 liuxiaoyong Exp $ */

package com.anyi.gp.print.util;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Map;

import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.xml.JRXmlLoader;

import com.anyi.gp.context.ApplusContext;
import com.anyi.gp.print.bean.PrintConstants;
import com.anyi.gp.print.exception.PrintingException;

/**
 * 
 * <p>
 * Title:
 * </p>
 * 
 * <p>
 * Description:
 * </p>
 * 
 * <p>
 * Copyright: Copyright (c) 2002
 * </p>
 * 
 * <p>
 * Company:
 * </p>
 * 
 * @author zhangyw
 * @version 1.0
 */
public class PrintTPLLoader {

	/**
	 * 
	 * @param tplCode
	 *            String
	 * @return JasperReport
	 */
	public static JasperReport loadTemplate(String tplCode) {
		PrintTPLLoader printTPLLoader = new PrintTPLLoader();
		return printTPLLoader.loadJasperReport(tplCode, null);
	}

	/**
	 * 
	 * @param tplCode
	 *            String
	 * @param printParameter
	 *            HashMap
	 * @return JasperReport
	 */
	public static JasperReport loadTemplate(String tplCode,
			Map printParameter) {
		PrintTPLLoader printTPLLoader = new PrintTPLLoader();
		return printTPLLoader.loadJasperReport(tplCode, printParameter);
	}

	/**
	 * 
	 * @param tplCode
	 *            String
	 * @param printParameter
	 *            HashMap
	 * @return JasperReport
	 */
	public JasperReport loadJasperReport(String tplCode, Map printParameter) {
		String fileName = "";
		if (printParameter == null
				|| (String) printParameter.get(PrintConstants.PRINT_DEBUG) == null) {
			String jasperReportPath = (String) printParameter
					.get("JasperReportPath");
			if (jasperReportPath == null) {
				jasperReportPath = PrintFileUtil.getJasperReportPath();
			}
			fileName = jasperReportPath + tplCode + ".jasper";
		} else {
			fileName = (String) printParameter
					.get(PrintConstants.PRINT_DEBUG_TEMPLATE_PATH)
					+ tplCode + ".jasper";
		}
		File file = new File(fileName);
		return loadJasperReport(file, printParameter);
	}

	/**
	 * 
	 * @param f
	 *            File
	 * @param printParameter
	 *            HashMap
	 * @return JasperReport
	 */
	public JasperReport loadJasperReport(File f, Map printParameter) {
		JasperReport result = null;
		try {
			if (f != null && f.exists()) {
				try {
					result = (JasperReport) JRLoader.loadObject(f);
				} catch (Exception e) {
					// 打印引擎升级导致
					result = recompile(PrintFileUtil.getFileName(f),
							printParameter);
					PrintTPLSaver.saveTemplate(result, f);
				}
			} else {
				throw new PrintingException(
						"Template Not Found ! 没有找到打印模板，请确认打印模板存放在服务器的"
								+ PrintFileUtil.getJasperReportPath() + "路径下。");
			}
		} catch (Exception e) {
			throw new RuntimeException(
					"Class PrintTPLLoader, Methoe loadJasperReport(File f) Exception :"
							+ e.getMessage() + "\n");

		}
		return result;
	}

	/**
	 * 
	 * @param tplCode
	 *            String
	 * @return JasperDesign
	 */
	public static JasperDesign loadDesign(String tplCode) {
		PrintTPLLoader printTPLLoader = new PrintTPLLoader();
		return printTPLLoader.loadJasperDesign(tplCode, null);
	}

	/**
	 * 
	 * @param tplCode
	 *            String
	 * @param printParameter
	 *            HashMap
	 * @return JasperDesign
	 */
	public static JasperDesign loadDesign(String tplCode, Map printParameter) {
		PrintTPLLoader printTPLLoader = new PrintTPLLoader();
		return printTPLLoader.loadJasperDesign(tplCode, printParameter);
	}

	/**
	 * 
	 * @param tplCode
	 *            String
	 * @param printParameter
	 *            HashMap
	 * @return JasperDesign
	 */
	public JasperDesign loadJasperDesign(String tplCode, Map printParameter) {
		String fileName = "";
		boolean isExist = false;
		if (printParameter == null
				|| (String) printParameter.get(PrintConstants.PRINT_DEBUG) == null) {
			String jasperReportPath = (String) printParameter.get("JasperReportPath");
			if (jasperReportPath == null) {
				jasperReportPath = PrintFileUtil.getJasperReportPath();
			}
			fileName = jasperReportPath + tplCode + ".xml";
		} else {
			fileName = (String) printParameter.get(PrintConstants.PRINT_DEBUG_TEMPLATE_PATH)
					+ tplCode + ".xml";
		}
		try {
			File file = new File(fileName);
			if(file != null && file.exists()){
				isExist = true;
			}
			if(!isExist){
				throw new PrintingException("Template Not Found ! 没有找到打印模板，请确认打印模板存放在服务器的"
								+ PrintFileUtil.getJasperReportPath() + "路径下。");
			}else{
				return this.getJasperDesign(fileName);
			}
		} catch (Exception e) {
			throw new RuntimeException(e.getMessage());
		}
		
		//return loadJasperDesign(fileName);
	}

	/**
	 * 
	 * @param fileName
	 *            String
	 * @return JasperDesign
	 */
	/**
	public JasperDesign loadJasperDesign(String fileName) {
		try {
			File file = new File(fileName);
			return loadJasperDesign(file);
		} catch (Exception e) {
			throw new RuntimeException(
					"Class PrintTPLLoader, Methoe loadJasperDesign(String fileName) Exception :"
							+ e.getMessage() + "\n");
		}
	}*/

	/**
	 * 
	 * @param f
	 *            File
	 * @return JasperDesign
	 * @throws JRException
	 * @throws PrintingException
	 */
	/**
	public JasperDesign loadJasperDesign(File f) {
		JasperDesign jasperDesign = null;
		try {
			if (f != null && f.exists()) {
				jasperDesign = JRXmlLoader.load(f);
			} else {
				throw new PrintingException(
						"Template Not Found ! 没有找到打印模板，请确认打印模板存放在服务器的"
								+ PrintFileUtil.getJasperReportPath() + "路径下。");
			}
		} catch (Exception e) {
			throw new RuntimeException(
					"Class PrintTPLLoader, Methoe loadJasperDesign(File f) Exception :"
							+ e.getMessage() + "\n");
		}
		return jasperDesign;
	}*/
	
	/**
	 * 考虑旧模板与新模板的兼容性而写的方法，将旧模板转换成新模板
	 * @param String fileName
	 * @return JasperDesign
	 */
	public JasperDesign getJasperDesign(String fileName){
		JasperDesign jasperDesign = null;
    BufferedReader in = null;
    ByteArrayInputStream bain = null;
		try{    
			//BufferedReader in = new BufferedReader(new FileReader(fileName));
      in = new BufferedReader(new InputStreamReader(new FileInputStream(fileName), "GBK"));
		  StringBuffer txt = new StringBuffer("");
		  while(in.ready()){
		    txt.append(in.readLine());
		  }
		  String fileXml = txt.toString();
		  if(fileXml.indexOf("com.anyi.erp.")>0){
		    fileXml = fileXml.replaceAll("com.anyi.erp.", "com.anyi.gp.");
		  }
      
		  byte[] tmpByte = fileXml.getBytes("GBK");
			bain = new ByteArrayInputStream(tmpByte);
			jasperDesign = JRXmlLoader.load(bain);
		}catch (Exception e) {
			throw new RuntimeException(
					"Class PrintTPLLoader, Methoe loadJasperDesign(File f) Exception :"
							+ e.getMessage() + "\n");
		}finally{
      try {
        in.close();
      } catch (IOException e) {
      }
      try {
        bain.close();
      } catch (IOException e) {
      }
    }
		return jasperDesign;
	}

	/**
	 * 
	 * @param tplCode
	 *            String
	 * @param printParameter
	 *            HashMap
	 * @return JasperReport
	 */
	public JasperReport recompile(String tplCode, Map printParameter) {
		JasperReport jasperReport = null;
		try {
			JasperDesign jasperDesign = loadJasperDesign(tplCode,
					printParameter);
			jasperReport = PrintCompiler.compileDesign(jasperDesign);
		} catch (Exception e) {
			throw new RuntimeException(
					"Class PrintTPLLoader, Methoe recompile(String tplCode, HashMap printParameter) Exception :"
							+ e.getMessage() + "\n");
		}
		return jasperReport;
	}

	/**
	 * 
	 * @return String
	 */
	public static String getJasperReportPath() {
		String sReportsPath = ApplusContext.getEnvironmentConfig().get(
				"reportspath");
		if (!sReportsPath.endsWith(File.separator)) {
			sReportsPath += File.separator;
		}
		return sReportsPath;
	}

}

/* Generated by Together */
/* $Id: PrintExporter.java,v 1.4 2008/05/08 02:04:53 liuxiaoyong Exp $ */
package com.anyi.gp.print.util;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletResponse;

import net.sf.jasperreports.engine.JRAbstractExporter;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRHtmlExporter;
import net.sf.jasperreports.engine.export.JRHtmlExporterParameter;
import net.sf.jasperreports.engine.export.JRPdfExporter;
import net.sf.jasperreports.engine.export.JRRtfExporter;
import net.sf.jasperreports.engine.export.JRTextExporter;
import net.sf.jasperreports.engine.export.JRTextExporterParameter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.export.JRXmlExporter;
import net.sf.jasperreports.engine.util.JRSaver;

import com.anyi.gp.print.bean.PrintConstants;
import com.anyi.gp.print.bean.PrintParameter;
import com.anyi.gp.print.exception.PrintingException;
import com.anyi.gp.print.service.imp.JrPrintBaseService;

public class PrintExporter extends JrPrintBaseService {

	/**
	 * 
	 * @param response
	 *            HttpServletResponse
	 * @param jasperPrintList
	 *            List
	 * @param printParameter
	 *            PrintParameter
	 */
	public static void exportFile(HttpServletResponse response,
			List jasperPrintList, PrintParameter printParameter) {
		PrintExporter printExporter = new PrintExporter();
		printExporter.exportReport(response, jasperPrintList, printParameter);
	}

	/**
	 * 根据打印设置中“打印前是否预览”输出打印信息；Y-输出到预览窗口；N-输出临时打印文件（JasperPrint文件）
	 * modified by hmgkevin 2008-05-07
	 * @param response HttpServletResponse
	 * @param jasperPrintList List
	 * @param printParameter  PrintParameter
	 */
	public void exportReport(HttpServletResponse response,
			List jasperPrintList, PrintParameter printParameter) {
		try {
			String sExportType = printParameter.getParameter(PrintConstants.PRINT_PARAMETER_EXPORT_TYPE);
			if (PrintConstants.EXPORT_XLS.equals(sExportType)) {
				jasperPrintList = setXLSPageSheetName(jasperPrintList);
			}
			JRAbstractExporter exporter = getConcreteExporter(sExportType);
			exporter.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jasperPrintList);

			if (printParameter.getParameter(PrintConstants.PRINT_DEBUG) != null) {
				exportReportToFile_Debug(exporter, printParameter);
			} else {
				String printToPrinter = printParameter.getParameter(PrintConstants.PRINT_PARAMETER_PRINTTO_PRINTER);
				if (PrintConstants.PRINT_TO_PRINTER.equals(printToPrinter)) {
					exportReportToPrinter(response, jasperPrintList, printParameter);
				} else {
					exportReport(response, exporter, printParameter);
				}
			}
		} catch (Exception e) {
			throw new RuntimeException(
					"Class PrintExporter, Method exportReport(HttpServletResponse response, List jasperPrintList, PrintParameter printParameter) Exception : "
							+ e.getMessage() + "\n");
		}
	}

	/**
	 * 
	 * @param exporter
	 *            JRAbstractExporter
	 * @param printParameter
	 *            PrintParameter
	 */
	public void exportReportToFile_Debug(JRAbstractExporter exporter, PrintParameter printParameter) {

		try {
			String destFile = printParameter.getParameter(PrintConstants.PRINT_DEBUG_EXPORTFILE_PATH);
			destFile += printParameter.getParameter(PrintConstants.PRINT_DEBUG_EXPORTFILE_NAME);
			String sExportType = printParameter.getParameter(PrintConstants.PRINT_PARAMETER_EXPORT_TYPE);
			destFile += getExportFileType(sExportType);
			printParameter.addParameter(PrintConstants.PRINT_EXPORT_DESTFILE_NAME, destFile);
			exportReportToFile(exporter, printParameter);
		} catch (Exception e) {
			throw new RuntimeException(
					"Class PrintExporter, Method exportReportToFile_Debug(JRAbstractExporter exporter,PrintParameter printParameter) Exception : "
							+ e.getMessage() + "\n");
		}
	}
	
	public void exportReportToPrinter(HttpServletResponse response, List jasperPrintlist, PrintParameter printParameter) {
		PrintFileUtil.deletePrintPdfFiles();
		PrintFileUtil printFileUtil = new PrintFileUtil();
		String filePath = printFileUtil.getPrintFilesPath();
		String fileID = printFileUtil.getFileID();
		String fileName = filePath + fileID + ".jasper";
		try {
			JRSaver.saveObject(jasperPrintlist, fileName);
			printParameter.addParameter(PrintConstants.PRINT_EXPORT_DESTFILE_NAME, fileName);
		} catch (JRException e) {
			e.printStackTrace();
		}
	}


	/**
	 * 
	 * @param exporter
	 *            JRAbstractExporter
	 * @param printParameter
	 *            PrintParameter
	 */
	public static void exportReportToFile(JRAbstractExporter exporter,
			PrintParameter printParameter) {
		try {
			String destFileName = printParameter.getParameter(PrintConstants.PRINT_EXPORT_DESTFILE_NAME);
			exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, destFileName);
			exporter.exportReport();
		} catch (JRException e) {
			throw new RuntimeException(
					"Class PrintExporter, Method exportReportToFile Exception : "
							+ e.getMessage() + "\n");
		}
	}

	/**
	 * 
	 * @param response
	 *            HttpServletResponse
	 * @param exporter
	 *            JRAbstractExporter
	 * @param printParameter
	 *            PrintParameter
	 */
	public void exportReport(HttpServletResponse response, JRAbstractExporter exporter, PrintParameter printParameter) {
		try {
			String sExportType = printParameter.getParameter(PrintConstants.PRINT_PARAMETER_EXPORT_TYPE);
			OutputStream out = getOutputStream(response, sExportType);
			exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, out);
			exporter.exportReport();
		} catch (JRException e) {
			throw new RuntimeException(
					"Class PrintExporter, Method exportReport(HttpServletResponse response,JRAbstractExporter exporter, PrintParameter printParameter) Exception : "
							+ e.getMessage() + "\n");
		} catch (PrintingException e) {
			throw new RuntimeException(
					"Class PrintExporter, Method exportReport(HttpServletResponse response,JRAbstractExporter exporter, PrintParameter printParameter) Exception : "
							+ e.getMessage() + "\n");
		}
	}

	/**
	 * 
	 * @param exportType
	 *            String
	 * @return JRAbstractExporter
	 */
	public static JRAbstractExporter getConcreteExporter(String exportType) {
		JRAbstractExporter exporter = null;
		try {
			if (PrintConstants.EXPORT_PDF.equals(exportType)) {
				exporter = new JRPdfExporter();
			} else if (PrintConstants.EXPORT_XLS.equals(exportType)) {
				exporter = new JRXlsExporter();
				exporter.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.FALSE);
				exporter.setParameter(JRXlsExporterParameter.IS_WHITE_PAGE_BACKGROUND, Boolean.TRUE);
				exporter.setParameter(JRXlsExporterParameter.IS_REMOVE_EMPTY_SPACE_BETWEEN_ROWS, Boolean.TRUE);
				exporter.setParameter(JRXlsExporterParameter.IS_AUTO_DETECT_CELL_TYPE, Boolean.TRUE);

			} else if (PrintConstants.EXPORT_CSV.equals(exportType)) {
				exporter = new JRCsvExporter();
			} else if (PrintConstants.EXPORT_HTML.equals(exportType)) {
				exporter = new JRHtmlExporter();
				// exporter = new JRPrintHtmlExporter();
				exporter.setParameter(JRHtmlExporterParameter.IS_WHITE_PAGE_BACKGROUND, Boolean.TRUE);
				exporter.setParameter(JRHtmlExporterParameter.IS_USING_IMAGES_TO_ALIGN, Boolean.FALSE);
			} else if (PrintConstants.EXPORT_XML.equals(exportType)) {
				exporter = new JRXmlExporter();
			} else if (PrintConstants.EXPORT_RTF.equals(exportType)) {
				exporter = new JRRtfExporter();
			} else if (PrintConstants.EXPORT_TEXT.equals(exportType)) {
				exporter = new JRTextExporter();
				exporter.setParameter(JRTextExporterParameter.CHARACTER_WIDTH,
						new Integer(10));
				exporter.setParameter(JRTextExporterParameter.CHARACTER_HEIGHT,
						new Integer(10));
			} else {
				exporter = new JRPdfExporter();
			}
			exporter.setParameter(JRExporterParameter.CHARACTER_ENCODING,
					"GBK");
		} catch (Exception e) {
			throw new RuntimeException(
					"Class PrintExporter, Method getConcreteExporter(String exportType) Exception : "
							+ e.getMessage() + "\n");
		}
		return exporter;
	}

	/**
	 * 
	 * @param response
	 *            HttpServletResponse
	 * @param exportType
	 *            String
	 * @return OutputStream
	 * @throws PrintingException
	 */
	private static OutputStream getOutputStream(HttpServletResponse response,
			String exportType) throws PrintingException {
		OutputStream out = null;

		try {
			if (PrintConstants.EXPORT_PDF.equals(exportType)) {
				response.setContentType("application/pdf");
			} else if (PrintConstants.EXPORT_XLS.equals(exportType)) {
				response.setContentType("application/vnd.ms-excel");
			} else if (PrintConstants.EXPORT_HTML.equals(exportType)) {
				response.setContentType("text/html");
			} else if (PrintConstants.EXPORT_CSV.equals(exportType)) {
				response.setContentType("application/vnd.ms-excel");
				// response.setContentType("text/comma-separated-values");
			} else if (PrintConstants.EXPORT_XML.equals(exportType)) {
				response.setContentType("text/xml");
			} else if (PrintConstants.EXPORT_RTF.equals(exportType)) {
				response.setContentType("application/msword");
			} else if (PrintConstants.EXPORT_TEXT.equals(exportType)) {
				response.setContentType("text/plain");
			} else {
				response.setContentType("application/pdf");
			}
			out = response.getOutputStream();
		} catch (IOException e) {
			throw new RuntimeException(
					"Class PrintExporter, Method getOutputStream(HttpServletResponse response, String exportType) Exception : "
							+ e.getMessage() + "\n");
		}
		return out;
	}

	/**
	 * 
	 * @param exportType
	 *            String
	 * @return String
	 */
	public static String getExportFileType(String exportType) {
		String fileType = "";
		if (PrintConstants.EXPORT_PDF.equals(exportType)) {
			fileType = ".pdf";
		} else if (PrintConstants.EXPORT_XLS.equals(exportType)) {
			fileType = ".xls";
		} else if (PrintConstants.EXPORT_CSV.equals(exportType)) {
			fileType = ".csv";
		} else if (PrintConstants.EXPORT_HTML.equals(exportType)) {
			fileType = ".html";
		} else if (PrintConstants.EXPORT_XML.equals(exportType)) {
			fileType = ".xml";
		} else if (PrintConstants.EXPORT_RTF.equals(exportType)) {
			fileType = ".rtf";
		} else if (PrintConstants.EXPORT_TEXT.equals(exportType)) {
			fileType = ".txt";
		} else {
			fileType = ".pdf";
		}
		return fileType;
	}

	/**
	 * 
	 * @param jasperPrintList
	 *            List
	 * @return List
	 */
	public static List setXLSPageSheetName(List jasperPrintList) {
		List list = new ArrayList();
		JasperPrint jasperPrint = null;
		String name = "";
		for (int i = 0; i < jasperPrintList.size(); i++) {
			jasperPrint = (JasperPrint) jasperPrintList.get(i);
			name = jasperPrint.getName();
			name = "Sheet" + String.valueOf(i) + " " + name;
			if (name.length() > 31) {
				name = name.substring(0, 30);
			}
			jasperPrint.setName(name);
			list.add(jasperPrint);
		}
		return list;
	}

	/**
	 * 
	 * @param printData
	 *            String
	 * @param tplCode
	 *            String
	 * @param sexportType
	 *            String
	 * @return byte[]
	 * @throws RuntimeException
	 */
	public static byte[] getExportFileStream(String printData, String tplCode,
			String sexportType) throws RuntimeException {

		byte[] pdfByteArray = null;

		try {
			PrintParameter printParameter = new PrintParameter();
			printParameter.addParameter(
					PrintConstants.PRINT_PARAMETER_PRINT_DATA, printData);
			printParameter.addParameter(
					PrintConstants.PRINT_PARAMETER_TPL_CODE, tplCode);
			printParameter.addParameter(
					PrintConstants.PRINT_PARAMETER_EXPORT_TYPE, sexportType);

			// List jasperPrintList = buildJasperPrintParam(printParameter);
			// pdfByteArray = exportReportToStream(jasperPrintList,
			// printParameter);
		} catch (Exception e) {
			throw new RuntimeException(
					"Class PrintExporter, Method getExportFileStream(String printData, String tplCode,String sexportType) Exception : "
							+ e.getMessage() + "\n");
		}

		return pdfByteArray;
	}

	/**
	 * 
	 * @param jasperPrintList
	 *            List
	 * @param printParameter
	 *            PrintParameter
	 * @return byte[]
	 */
	public static byte[] exportReportToStream(List jasperPrintList,
			PrintParameter printParameter) {

		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		try {
			String sExportType = printParameter
					.getParameter(PrintConstants.PRINT_PARAMETER_EXPORT_TYPE);
			JRAbstractExporter exporter = getConcreteExporter(sExportType);
			if (PrintConstants.EXPORT_XLS.equals(sExportType)) {
				jasperPrintList = setXLSPageSheetName(jasperPrintList);
			}
			exporter.setParameter(JRExporterParameter.JASPER_PRINT_LIST,
					jasperPrintList);
			exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, baos);
			exporter.exportReport();
		} catch (JRException e) {
			throw new RuntimeException(
					"Class PrintExporter, Method exportReportToStream(List jasperPrintList,PrintParameter printParameter) Exception : "
							+ e.getMessage() + "\n");
		}
		return baos.toByteArray();
	}
}

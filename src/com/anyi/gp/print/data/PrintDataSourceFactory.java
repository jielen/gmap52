/* Generated by Together */
/* $Id: PrintDataSourceFactory.java,v 1.7 2009/07/10 08:36:56 liuxiaoyong Exp $ */
package com.anyi.gp.print.data;

/**
 * <p>
 * Title: PrintDataSourceFactory获得JasperReport数据源工厂类
 * </p>
 * <p>
 * Description: 获得数据源工厂类
 * </p>
 * <p>
 * Copyright: Copyright (c) 2004
 * </p>
 * <p>
 * Company: UFGOV
 * </p>
 * 
 * @author leejianwei
 * @version 1.0
 */

import java.io.BufferedInputStream;
import java.io.InputStream;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRResultSetDataSource;
import net.sf.jasperreports.engine.data.JRXmlDataSource;

import org.w3c.dom.Document;

import com.anyi.gp.Delta;
import com.anyi.gp.TableData;
import com.anyi.gp.print.bean.PrintConstants;
import com.anyi.gp.print.util.PrintDbInfor;
import com.anyi.gp.print.util.PrintTPLUtil;

public class PrintDataSourceFactory {
	/**
	 * 根据输入流返回XML格式数据源
	 * 
	 * @param source
	 *            InputStream 输入流
	 * @throws JRException
	 * @return JRXmlDataSource XML数据源
	 */
	public static JRXmlDataSource getXMLDataSource(InputStream source)
			throws JRException {
		JRXmlDataSource result = null;
		result = new JRXmlDataSource(new BufferedInputStream(source));
		return result;
	}

	/**
	 * 根据DOM文档返回XML格式数据源
	 * 
	 * @param source
	 *            InputStream DOM文档
	 * @throws JRException
	 * @return JRXmlDataSource XML数据源
	 */
	public static JRXmlDataSource getXMLDataSource(Document doc)
			throws JRException {
		JRXmlDataSource result = null;
		result = new JRXmlDataSource(doc);
		return result;
	}

	/**
	 * 根据结果集返回结果集数据源
	 * 
	 * @param data
	 *            ResultSet 结果集
	 * @return JRResultSetDataSource 结果集数据源
	 */
	public static JRResultSetDataSource getResultSetDataSource(ResultSet data) {
		JRResultSetDataSource result = null;
		result = new JRResultSetDataSource(data);
		return result;
	}

	/**
	 * 
	 * @param data
	 *            HashMap
	 * @param template
	 *            HashMap
	 * @param printParameter
	 *            HashMap
	 * @return List
	 */
	public static List getPrintDataSource(Map data, Map template,
			Map printParameter) {
		PrintDataSourceFactory printDataSourceFactory = new PrintDataSourceFactory();
		return printDataSourceFactory.getPrintDataSourceList(data, template, printParameter);
	}

	/**
	 * 
	 * @param data
	 *            HashMap
	 * @param template
	 *            HashMap
	 * @param printParameter
	 *            HashMap
	 * @return List
	 */
	public List getPrintDataSourceList(Map data, Map template, Map printParameter) {
		List dataSourceList = new ArrayList();
		try {
			int ifixrowcount = getFixRowCount(template, printParameter);
			DataConvertor dataconvertor = new DataConvertor();
			String dataType = (String) data.get(PrintConstants.PRINT_PARAMETER_DATA_TYPE);
			String valueSet = (String)printParameter.get(PrintConstants.PRINT_PARAMETER_VALUE_SET);
			if (PrintConstants.DATA_TYPE_DELTA.equalsIgnoreCase(dataType)) {
				dataSourceList = dataconvertor.convertDeltaData((Delta) data.get(PrintConstants.PRINT_PARAMETER_DATA),ifixrowcount, valueSet);
			} else if (PrintConstants.DATA_TYPE_TABLEDATA.equalsIgnoreCase(dataType)) {
				dataSourceList = dataconvertor.convertTableData(
						(TableData) data.get(PrintConstants.PRINT_PARAMETER_DATA),ifixrowcount, printParameter);
			} else {
				dataSourceList = dataconvertor.convertData((String) data.get(PrintConstants.PRINT_PARAMETER_DATA),
						ifixrowcount, printParameter);
			}
			setNoTemplateParameter(dataSourceList, printParameter);
			setListPageHeadData(dataSourceList, printParameter);
		} catch (Exception e) {
			throw new RuntimeException(
					"Class PrintDataSourceFactory, Method getPrintDataSource(HashMap data, HashMap template, HashMap printParameter) Error : "
							+ e.getMessage() + "\n");
		}
		return dataSourceList;
	}

	/**
	 * 
	 * @param template
	 *            HashMap
	 * @param printParameter
	 *            HashMap
	 * @return int
	 */
	public static int getFixRowCount(Map template, Map printParameter) {
		int ifixrowcount = 0;
		String tplCode = (String) template.get(PrintConstants.PRINT_PARAMETER_TPL_CODE);
		if (tplCode != null && !tplCode.equals("")) {
			if (template.get(tplCode + "_FIXROWCOUNT") != null) {
				return Integer.parseInt((String) template.get(tplCode
						+ "_FIXROWCOUNT"));
			}
			if (!printParameter.containsKey(PrintConstants.PRINT_DEBUG)) {
				PrintDbInfor printDbInfor = new PrintDbInfor();
				ifixrowcount = printDbInfor.getFixRowCount(tplCode);
			} else {
				String sfixrowcount = (String) printParameter
						.get(PrintConstants.PRINT_PARAMETER_FIXROWCOUNT);
				ifixrowcount = PrintTPLUtil.str2Int(sfixrowcount);
			}
			template.put(tplCode + "_FIXROWCOUNT", String.valueOf(ifixrowcount));
		}
		return ifixrowcount;
	}

	/**
	 * 
	 * @param dataSourceList
	 *            List
	 * @param printParameter
	 *            HashMap
	 */
	public void setNoTemplateParameter(List dataSourceList,
			Map printParameter) {
		if (dataSourceList != null && dataSourceList.size() > 0) {
			Map paramValues = (Map) printParameter
					.get(PrintConstants.PRINT_PARAMETER_NOTEMPLATE_PARAMVALUES);
			if (paramValues != null) {
				Map parameters = (Map) dataSourceList.get(0);
				parameters.putAll(paramValues);
				dataSourceList.remove(0);
				dataSourceList.add(0, parameters);
			}
		}
	}

	/**
	 * 
	 * @param dataSourceList
	 *            List
	 * @param printParameter
	 *            HashMap
	 */
	public void setListPageHeadData(List dataSourceList, Map printParameter) {
		if (dataSourceList != null && dataSourceList.size() > 0) {
			Map paramValues = (Map) printParameter
					.get(PrintConstants.PRINT_PARAMETER_LISTPAGE_HEADDATA);
			if (paramValues != null) {
				Map parameters = (Map) dataSourceList.get(0);
				parameters.putAll(paramValues);
				dataSourceList.remove(0);
				dataSourceList.add(0, parameters);
			}
			Map session = (Map)printParameter.get(PrintConstants.PRINT_PARAMETER_SESSION);
			if (session != null) {
				Map parameters = (Map) dataSourceList.get(0);
				parameters.putAll(session);
				dataSourceList.remove(0);
				dataSourceList.add(0, parameters);
			}
		}
	}
}
